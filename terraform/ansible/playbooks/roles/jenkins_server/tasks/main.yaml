---
# Update apt cache
- name: Update apt cache
  apt:
    update_cache: yes

# Update apt cache and install prerequisite packages once at the beginning
- name: Update apt cache and install prerequisite packages
  apt:
    name:
      - openjdk-17-jdk
      - wget
      - apt-transport-https
      - gnupg
      - unzip
      - ca-certificates
      - curl
      - lsb-release
    state: present
    update_cache: yes

# Add Jenkins APT Key and configure Jenkins repository
- name: Add Jenkins APT Key and repository
  apt_key:
    url: https://pkg.jenkins.io/debian/jenkins.io-2023.key
    state: present

- name: Configure Jenkins repository
  apt_repository:
    repo: 'deb https://pkg.jenkins.io/debian-stable binary/'
    state: present

# Install and start Jenkins
- name: Install and start Jenkins
  apt:
    name: jenkins
    state: present

- name: Start Jenkins service
  service:
    name: jenkins
    state: started
    enabled: yes

# Jenkins admin password retrieval and storage
- name: Retrieve and store Jenkins admin password
  command: "cat /var/lib/jenkins/secrets/initialAdminPassword"
  register: initial_admin_password
  changed_when: false

- name: Store Jenkins Admin Password in secrets directory
  copy:
    content: "{{ initial_admin_password.stdout }}"
    dest: "../secrets/jenkins_password.txt"
  when: initial_admin_password.stdout is defined
  delegate_to: localhost

# Trivy installation
- name: Download and install Trivy
  ansible.builtin.get_url:
    url: "https://github.com/aquasecurity/trivy/releases/download/v0.56.0/trivy_0.56.0_Linux-64bit.deb"
    dest: "/tmp/trivy_0.56.0_Linux-64bit.deb"

- name: Install Trivy package
  apt:
    deb: "/tmp/trivy_0.56.0_Linux-64bit.deb"
    state: present

# AWS CLI installation
- name: Check if AWS CLI is installed
  command: "aws --version"
  register: aws_cli_check
  ignore_errors: yes

- name: Download and install AWS CLI if not present
  ansible.builtin.get_url:
    url: "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip"
    dest: "/tmp/awscliv2.zip"
  when: aws_cli_check.rc != 0

- name: Unzip and install AWS CLI
  unarchive:
    src: "/tmp/awscliv2.zip"
    dest: "/tmp/"
    remote_src: yes
  when: aws_cli_check.rc != 0

- name: Run AWS CLI installer
  command: "/tmp/aws/install"
  when: aws_cli_check.rc != 0

# Docker setup
- name: Create directory for APT keyrings and add Docker GPG key
  file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'

- name: Add Docker's GPG key
  apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    state: present

- name: Add Docker repository and install Docker packages
  apt_repository:
    repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release | lower }} stable"
    state: present

- name: Install Docker and Docker Compose plugin
  apt:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-buildx-plugin
      - docker-compose-plugin
    state: present

# Add ubuntu and Jenkins to Docker group and restart Jenkins
- name: Add ubuntu and Jenkins to Docker group and restart Jenkins
  user:
    name: "{{ item }}"
    groups: docker
    append: yes
  loop:
    - ubuntu
    - jenkins

- name: Restart Jenkins service
  service:
    name: jenkins
    state: restarted

# Kubernetes and Helm setup remains as is (no redundancies here)

# Define the kubectl version
- name: Set kubectl version
  set_fact:
    kubectl_version: "v1.29.0"

# Download kubectl version 1.27
- name: Download kubectl
  ansible.builtin.get_url:
    url: "https://dl.k8s.io/release/{{ kubectl_version }}/bin/linux/amd64/kubectl"
    dest: "/tmp/kubectl"
  register: download_kubectl

# Ensure permissions and install kubectl
- name: Install kubectl
  ansible.builtin.command:
    cmd: "install -o root -g root -m 0755 /tmp/kubectl /usr/local/bin/kubectl"
  when: download_kubectl is succeeded

# Verify kubectl installation
- name: Verify kubectl version
  command: kubectl version --client
  register: kubectl_version_check
  changed_when: false

- debug:
    msg: "kubectl version installed: {{ kubectl_version_check.stdout }}"

    
# Helm installation using APT
- name: Add Helm GPG key
  ansible.builtin.shell: "curl https://baltocdn.com/helm/signing.asc | gpg --dearmor -o /usr/share/keyrings/helm.gpg"
  args:
    creates: /usr/share/keyrings/helm.gpg

- name: Install apt-transport-https
  apt:
    name: apt-transport-https
    state: present

- name: Add Helm repository
  ansible.builtin.shell: |
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main" | tee /etc/apt/sources.list.d/helm-stable-debian.list

- name: Update apt cache for Helm
  apt:
    update_cache: yes

- name: Install Helm
  apt:
    name: helm
    state: present

# Verify Helm installation
- name: Verify Helm version
  command: helm version --short
  register: helm_version_check
  changed_when: false

- debug:
    msg: "Helm version installed: {{ helm_version_check.stdout }}"
  
# Download Kops binary
- name: Download Kops
  ansible.builtin.get_url:
    url: "https://github.com/kubernetes/kops/releases/download/v1.29.0/kops-linux-amd64"
    dest: "/tmp/kops"
  
# Make Kops executable
- name: Make Kops executable
  ansible.builtin.command:
    cmd: "chmod +x /tmp/kops"

# Move Kops to local bin
- name: Move Kops to /usr/local/bin
  ansible.builtin.command:
    cmd: "mv /tmp/kops /usr/local/bin/kops"
  
# Verify Kops installation
- name: Verify Kops version
  command: kops version
  register: kops_version_check
  changed_when: false

- debug:
    msg: "Kops version installed: {{ kops_version_check.stdout }}"
